{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\regol\\\\Documents\\\\REACT\\\\INVADERS\\\\Invaders-monorepo\\\\packages\\\\spaceinvaders\\\\src\\\\gameElements\\\\Player.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Player({\n  onSubmit,\n  score,\n  deletePlayer,\n  setScore,\n  setGameOver,\n  players,\n  fetchPlayers\n}) {\n  _s();\n\n  const [isNameSubmited, setIsNameSubmited] = useState(false);\n\n  const handleSubmit = async function (e) {\n    e.preventDefault();\n    const form = e.target;\n    const data = Object.fromEntries(new FormData(form));\n    data.score = score; // find worst \n    // if (players) {\n    //     let lowestScore = players[0].score\n    //     let worstPlayer = players[0]  \n    //         for (let i=1; i < players.length;i++){\n    //             if(players[i].score < lowestScore){\n    //             worstPlayer = players[i]\n    //             lowestScore = players[i].score\n    //         }\n    //     }\n    // } \n\n    const insertScore = async function () {\n      try {\n        await onSubmit(data);\n        fetchPlayers();\n        let timer = setInterval(() => {\n          setIsNameSubmited(() => true);\n          clearInterval(timer);\n        }, 100);\n      } catch (error) {\n        throw error;\n      }\n    };\n\n    insertScore(); // if(players.length >3){\n    //     if(data.score < lowestScore){\n    //         setIsNameSubmited(()=> true)\n    //     } else {\n    //         deletePlayer(worstPlayer)\n    //         insertScore()\n    //     }\n    //     // data.score < lowestScore ? setIsNameSubmited(()=> true) : insertScore()\n    // } else if (players.length <=3)insertScore()\n  };\n\n  const handleClick = () => {\n    setScore(() => 0);\n    setGameOver(() => false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !isNameSubmited ? /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"player\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"name\",\n        htmlFor: \"player\",\n        children: \"ENTER YOUR NAME  :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 76\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"playerInput\",\n        name: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 68\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sendButton mt-2\",\n        htmltype: \"submit\",\n        children: \" SEND\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(HallOfFame, {\n        players: players,\n        handleClick: handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(Player, \"faBFJoDtqN7jUx9UF1vyHXW1Zr4=\");\n\n_c = Player;\n\nconst HallOfFame = function ({\n  players,\n  handleClick\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"hall of fame\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: players.map(player => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: player.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"scored\",\n            children: player.score\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 51\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-danger btn-sm mt-2\",\n        onClick: handleClick,\n        children: \"PLAY AGAIN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_c2 = HallOfFame;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Player\");\n$RefreshReg$(_c2, \"HallOfFame\");","map":{"version":3,"sources":["C:/Users/regol/Documents/REACT/INVADERS/Invaders-monorepo/packages/spaceinvaders/src/gameElements/Player.jsx"],"names":["React","useEffect","useState","Player","onSubmit","score","deletePlayer","setScore","setGameOver","players","fetchPlayers","isNameSubmited","setIsNameSubmited","handleSubmit","e","preventDefault","form","target","data","Object","fromEntries","FormData","insertScore","timer","setInterval","clearInterval","error","handleClick","HallOfFame","map","player","name"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\r\nimport {useState} from 'react'\r\n\r\n\r\nexport function Player({onSubmit, score, deletePlayer, setScore, setGameOver, players, fetchPlayers}) {\r\n\r\n    const [isNameSubmited, setIsNameSubmited] = useState(false)\r\n\r\n    const handleSubmit = async function(e){\r\n        e.preventDefault()\r\n        const form = e.target \r\n        const data = Object.fromEntries(new FormData(form))\r\n        data.score = score\r\n\r\n        // find worst \r\n        // if (players) {\r\n        //     let lowestScore = players[0].score\r\n        //     let worstPlayer = players[0]  \r\n        //         for (let i=1; i < players.length;i++){\r\n        //             if(players[i].score < lowestScore){\r\n        //             worstPlayer = players[i]\r\n        //             lowestScore = players[i].score\r\n        //         }\r\n        //     }\r\n        // } \r\n\r\n\r\n        const insertScore = async function (){\r\n            try { \r\n                await onSubmit(data)\r\n                fetchPlayers();\r\n                let timer = setInterval(()=> {\r\n                    setIsNameSubmited(()=> true)\r\n                    clearInterval(timer)\r\n                },100)               \r\n            } catch (error) {\r\n                throw error\r\n            } \r\n        }\r\n\r\n        insertScore()\r\n\r\n        // if(players.length >3){\r\n\r\n\r\n        //     if(data.score < lowestScore){\r\n        //         setIsNameSubmited(()=> true)\r\n        //     } else {\r\n        //         deletePlayer(worstPlayer)\r\n        //         insertScore()\r\n        //     }\r\n        //     // data.score < lowestScore ? setIsNameSubmited(()=> true) : insertScore()\r\n        \r\n        // } else if (players.length <=3)insertScore()\r\n    }\r\n\r\n    const handleClick = ()=>{\r\n        setScore(()=> 0)\r\n        setGameOver(()=> false)\r\n    }\r\n \r\n    return <>\r\n    {!isNameSubmited ? \r\n    <form className='player' onSubmit ={handleSubmit}>\r\n        <label className='name' htmlFor='player'>ENTER YOUR NAME  :</label><br/>\r\n        <input type = 'text' className='playerInput' name ='name'/><br/>\r\n        <button className='sendButton mt-2' htmltype = 'submit'> SEND</button>\r\n    </form> : \r\n    <div >        \r\n        <HallOfFame players={players} handleClick={handleClick}/>       \r\n    </div>\r\n    }\r\n    </>\r\n}\r\n\r\nconst HallOfFame = function({players, handleClick}){\r\n\r\n    return <>\r\n        <div class=\"table\">\r\n            <h2>hall of fame</h2>\r\n            <ul>\r\n                {players.map( player =>\r\n                    <li>\r\n                        <span>{player.name}</span><span className='scored'>{player.score}</span>\r\n                    </li>              \r\n                )} \r\n            </ul>\r\n            <button\r\n            className='btn btn-outline-danger btn-sm mt-2' \r\n            onClick={handleClick}>PLAY AGAIN\r\n            </button>\r\n        </div>\r\n\r\n    {/* <div className='hallOfFame'>\r\n   \r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th colSpan ='3'>HALL OF FAME</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {players.map( player => \r\n                <tr>\r\n                    <td>{player.name}</td>.....<td>{player.score} KILLS</td>\r\n                </tr>)\r\n                }   \r\n            </tbody>\r\n        </table> \r\n        <div>               \r\n             <button\r\n            className='btn btn-outline-danger btn-sm mt-2' \r\n            onClick={handleClick}>PLAY AGAIN\r\n            </button>              \r\n        </div>\r\n    </div> */}\r\n        \r\n    </>\r\n }\r\n\r\n"]},"metadata":{},"sourceType":"module"}