{"ast":null,"code":"export class ApiErrors {\n  constructor(errors) {\n    this.errors = errors;\n  }\n\n}\nexport async function apiFetch(endpoint, options = {}) {\n  options = {\n    // credentials : 'include',\n    headers: {\n      Accept: 'application/json'\n    },\n    ...options\n  };\n\n  if (options.body !== null && typeof options.body === 'object' && !(options.body instanceof FormData)) {\n    options.body = JSON.stringify(options.body);\n    options.headers['Content-Type'] = 'application/json';\n  }\n\n  const response = await fetch('http://localhost:8080' + endpoint, options);\n\n  if (response.status === 204) {\n    console.log('ok 204');\n    return null;\n  }\n\n  const responseData = await response.json();\n\n  if (response.ok) {\n    console.log('oke response data');\n    return responseData;\n  } else {\n    if (responseData.errors) {\n      throw new ApiErrors(responseData.errors);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/regol/Documents/REACT/INVADERS/Invaders-monorepo/packages/spaceinvaders/src/utils/apiFetch.js"],"names":["ApiErrors","constructor","errors","apiFetch","endpoint","options","headers","Accept","body","FormData","JSON","stringify","response","fetch","status","console","log","responseData","json","ok"],"mappings":"AACA,OAAO,MAAMA,SAAN,CAAe;AAClBC,EAAAA,WAAW,CAAEC,MAAF,EAAS;AAChB,SAAKA,MAAL,GAAcA,MAAd;AACH;;AAHiB;AAOtB,OAAO,eAAeC,QAAf,CAAwBC,QAAxB,EAAkCC,OAAO,GAAE,EAA3C,EAA8C;AACjDA,EAAAA,OAAO,GAAG;AACN;AACAC,IAAAA,OAAO,EAAG;AACNC,MAAAA,MAAM,EAAG;AADH,KAFJ;AAMN,OAAGF;AANG,GAAV;;AASA,MAAGA,OAAO,CAACG,IAAR,KAAiB,IAAjB,IAAyB,OAAOH,OAAO,CAACG,IAAf,KAAuB,QAAhD,IAA4D,EAAEH,OAAO,CAACG,IAAR,YAAwBC,QAA1B,CAA/D,EAAoG;AAChGJ,IAAAA,OAAO,CAACG,IAAR,GAAeE,IAAI,CAACC,SAAL,CAAeN,OAAO,CAACG,IAAvB,CAAf;AACAH,IAAAA,OAAO,CAACC,OAAR,CAAgB,cAAhB,IAAmC,kBAAnC;AACH;;AACD,QAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,0BAA0BT,QAA5B,EAAsCC,OAAtC,CAA5B;;AACA,MAAGO,QAAQ,CAACE,MAAT,KAAoB,GAAvB,EAA2B;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,WAAO,IAAP;AACH;;AACD,QAAMC,YAAY,GAAG,MAAML,QAAQ,CAACM,IAAT,EAA3B;;AACA,MAAGN,QAAQ,CAACO,EAAZ,EAAe;AACXJ,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,WAAOC,YAAP;AAEH,GAJD,MAIO;AACH,QAAGA,YAAY,CAACf,MAAhB,EAAuB;AACnB,YAAM,IAAIF,SAAJ,CAAciB,YAAY,CAACf,MAA3B,CAAN;AACH;AAEJ;AAEJ","sourcesContent":["\r\nexport class ApiErrors{\r\n    constructor (errors){\r\n        this.errors = errors;\r\n    }\r\n\r\n}\r\n\r\nexport async function apiFetch(endpoint, options ={}){\r\n    options = {\r\n        // credentials : 'include',\r\n        headers : {\r\n            Accept : 'application/json',\r\n            \r\n        },\r\n        ...options\r\n    }\r\n\r\n    if(options.body !== null && typeof options.body ==='object' && !(options.body instanceof FormData)) {\r\n        options.body = JSON.stringify(options.body)\r\n        options.headers['Content-Type'] =  'application/json'\r\n    }\r\n    const response = await fetch ('http://localhost:8080' + endpoint, options)\r\n    if(response.status === 204){\r\n        console.log('ok 204')\r\n        return null;\r\n    }\r\n    const responseData = await response.json();\r\n    if(response.ok){\r\n        console.log('oke response data')\r\n        return responseData;\r\n        \r\n    } else {\r\n        if(responseData.errors){\r\n            throw new ApiErrors(responseData.errors);\r\n        }\r\n\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}